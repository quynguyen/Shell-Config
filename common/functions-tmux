#!/bin/sh

function tmux-scala
{
  tmux start-server

  doesTmuxSessionExist "scala" && return

  # Create the a session named, 'mdi', whose first window is called, 'root'
  tmux new-session -d -s scala -n main
    # Split the 'root' window vertically, and split the right pane horizontally
    tmux split-window -h -t scala:0 # -h actually means split vertically
    tmux split-window -v -t scala:0.right #-v actually means split horizontally

    # Set initial directories
    tmux send-keys -t scala:0.left "cd $PWD; scala" C-m
    tmux send-keys -t scala:0.top-right "cd $PWD; clear" C-m
    tmux send-keys -t scala:0.bottom-right "cd $PWD; watch tree" C-m

  # Select the first window
  tmux select-pane -L -t scala:0
  tmux select-window -t scala:0

  # Attach the session
  tmux attach-session -t scala
}

function tmux-mdi
{
  tmux start-server

  doesTmuxSessionExist "mdi" && return

  # Create the a session named, 'mdi', whose first window is called, 'root'
  tmux new-session -d -s mdi -n root

    # Split the 'root' window vertically, and split the right pane horizontally
    tmux split-window -h -t mdi:0 # -h actually means split vertically
    tmux split-window -v -t mdi:0.right #-v actually means split horizontally

    # Make all of them root panels
    tmux send-keys -t mdi:0.left "sudo su" C-m
    tmux send-keys -t mdi:0.top-right "sudo su" C-m
    tmux send-keys -t mdi:0.bottom-right "sudo su" C-m
    
    # Set initial directories
    tmux send-keys -t mdi:0.left "cd /root; clear" C-m
    tmux send-keys -t mdi:0.top-right "cd /etc/portage/; clear" C-m
    tmux send-keys -t mdi:0.bottom-right "tail -f /var/log/emerge.log" C-m
    
    tmux select-pane -L -t mdi:0

  # Create a jetty window
  tmux new-window -t mdi:1 -n jetty
      
    tmux split-window -h -t mdi:1 # -h actually means split vertically
    
    tmux send-keys -t mdi:1.left "cd /home/quy/bin/jetty; clear" C-m
    tmux send-keys -t mdi:1.right "cd /tmp; clear" C-m

    tmux select-pane -L -t mdi:1

  # Create a modules window
  tmux new-window -t mdi:2 -n modules

    tmux split-window -h -t mdi:2 # -h actually means split vertically
    tmux split-window -v -t mdi:2.right #-v actually means split horizontally
    
    tmux send-keys -t mdi:2.left "cd $modules; clear" C-m
    tmux send-keys -t mdi:2.top-right "cd $mdi; clear " C-m
    tmux send-keys -t mdi:2.bottom-right "cd $mdi; clear" C-m

    tmux select-pane -L -t mdi:2

  # Create an ear window
  tmux new-window -t mdi:3 -n ear

    tmux split-window -h -t mdi:3 # -h actually means split vertically
    tmux split-window -v -t mdi:3.right #-v actually means split horizontally
    
    tmux send-keys -t mdi:3.left "cd $cu; clear" C-m
    tmux send-keys -t mdi:3.top-right "clear; cd $ear/META-INF/; vim application.xml" C-m
    tmux send-keys -t mdi:3.bottom-right "cd $ear; clear" C-m

    tmux select-pane -L -t mdi:3

  # Create an Root JPTree  window
  tmux new-window -t mdi:4 -n "Root JPTree"

    tmux split-window -h -t mdi:4 # -h actually means split vertically
    
    tmux send-keys -t mdi:4.left "cd $rjptree" C-m
    tmux send-keys -t mdi:4.right "cd $wjptree" C-m

    tmux select-pane -L -t mdi:4

  # Create a PSD Root JPTree Window
  tmux new-window -t mdi:5 -n "PSD JPTree"

    tmux split-window -h -t mdi:5 # -h actually means split vertically
    
    tmux send-keys -t mdi:5.left "cd $prjptree" C-m
    tmux send-keys -t mdi:5.right "cd $pwjptree" C-m

    tmux select-pane -L -t mdi:5

  # Create a PSD Root JPTree Window
  tmux new-window -t mdi:6 -n "PSD Teamsite JPTree"

    tmux split-window -h -t mdi:6 # -h actually means split vertically
    
    tmux send-keys -t mdi:6.left "cd $posjptree" C-m
    tmux send-keys -t mdi:6.right "cd $pojptree" C-m

    tmux select-pane -L -t mdi:6

  # Select the root window
  tmux select-window -t mdi:0

  # Attach the session
  tmux attach-session -t mdi
}

function doesTmuxSessionExist
{
    local session=$1
    tmux list-sessions | grep -q $session
    local exists=$?
    [ $exists == 0 ] && echo "Tmux session $session already exists"
    return $exists
}
