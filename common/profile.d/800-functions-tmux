#!/bin/sh

export CMD_DOCKER_UP="docker-compose up"
export CMD_BLADE_RUNNER="mvn blade:run"
export TMUX_WAIT_PLATFORM="Platform-Loaded"
export TMUX_NO_ATTACH="TMUX_NO_ATTACH"
export TMUX_ATTACH="TMUX_ATTACH"

function tmux-bbp()
{
	local session=${1:-"bb-platform"}
	local sessionName=${2:-"BB Platform"}
	local attach=${3:-$TMUX_ATTACH}
	tmuxAttachOrCreateSession ${session}

	# Create a split window: Docker on the left; DBS Infra on te right
	tmux new-session -d -s ${session} -n b $sessionName
	tmux split-window -h -t ${session}:0 # -h actually means split vertically

	# Start Docker
	tmux send-keys -t ${session}:0.left "cd ${BB_PLATFORM}; ${CMD_DOCKER_UP}" C-m
	# Start The DBS Infra
	tmux send-keys -t ${session}:0.right "cd ${BB_PLATFORM}; ${CMD_BLADE_RUNNER}" C-m

	[[ ${attach} == ${TMUX_ATTACH} ]] && tmux-attach ${session}
}

function tmux-bbdbs()
{
	local session=${1:-"bb-dbs"}
	local sessionName=${2:-"BB DBS"}
	local attach=${3:-$TMUX_ATTACH}
	tmuxAttachOrCreateSession ${session}

	# Delay, then send a signal that Infra is done loading
	(sleep 120; tmux wait-for -S ${TMUX_WAIT_PLATFORM})&

	# Create a Window for each DBS Capability listed in ~/.bb/dbs-all (minus ~/.bb/dbs-excluded)
	local i=1
	for c in $(dbs); do
		# Window for the DBS Capability
		tmux new-window -t ${session}:${i} -n "${c}"
		# Wait for the "${TMUX_WAIT_PLATFORM}" signal, and then run Maven
		tmux send-keys -t ${session}:${i} "cd ${DBS_HOME}/${c}; tmux wait-for ${TMUX_WAIT_PLATFORM}; ${CMD_BLADE_RUNNER}" C-m
		tmux select-pane -L -t ${session}:${i}
		((i++))
	done

	[[ ${attach} == ${TMUX_ATTACH} ]] && tmux-attach ${session}
}

function tmux-bbpAndDbs()
{
	local session=${1:-"bb-platform-and-dbs"}
	local sessionName=${2:-"BB Platform And DBS"}
	tmux-bbp $session $sessionName $TMUX_NO_ATTACH
	tmux-bbdbs $session $sessionName
}


function tmux-kill()
{
    tmux kill-session -t $1
}

function tmux-attach()
{
	local session=$1

	if [ -n "$TMUX" ]; then
		tmux switch-client -t $session
	else
		tmux attach -t $1
	fi
}

function tmux-scala
{
  tmux start-server

  doesTmuxSessionExist "scala" && tmux-attach scala && return

  local startingDir=$PWD

  # Create the a session named, 'mdi', whose first window is called, 'root'
  tmux new-session -d -s scala -n root
    tmux split-window -h -t scala:0 # -h actually means split vertically
    tmux split-window -v -t scala:0.right #-v actually means split horizontally

    tmux send-keys -t mdi:0.left "cd $startingDir; clear" C-m
    tmux send-keys -t mdi:0.top-right "cd $startingDir; clear" C-m

    tmux select-pane -L -t scala:0

  # Create Split Window
  tmux new-window -t scala:1 -n scala
    tmux split-window -h -t scala:1 # -h actually means split vertically
    tmux split-window -v -t scala:1.right #-v actually means split horizontally

    # Set initial directories
    tmux send-keys -t scala:1.left "cd $startingDir; clear" C-m
    tmux send-keys -t scala:1.top-right "cd $startingDir; clear; sbt" C-m
    tmux send-keys -t scala:1.bottom-right "cd $startingDir; watch tree" C-m
  
    tmux select-pane -L -t scala:1

  tmux new-window -t scala:2 -n repl

    # Set initial directories
    tmux send-keys -t scala:2 "cd $startingDir; scala" C-m

  # Select the first window
  tmux select-window -t scala:1

  # Attach the session
  tmux attach-session -t scala
}

function tmux-mdi
{
  tmux start-server

  doesTmuxSessionExist "mdi" && tmux-attach mdi && return

  # Create the a session named, 'mdi', whose first window is called, 'root'
  tmux new-session -d -s mdi -n root

    # Split the 'root' window vertically, and split the right pane horizontally
    tmux split-window -h -t mdi:0 # -h actually means split vertically
    tmux split-window -v -t mdi:0.right #-v actually means split horizontally

    # Make all of them root panels
    tmux send-keys -t mdi:0.left "sudo su" C-m
    tmux send-keys -t mdi:0.top-right "sudo su" C-m
    tmux send-keys -t mdi:0.bottom-right "sudo su" C-m
    
    # Set initial directories
    tmux send-keys -t mdi:0.left "cd /root; clear" C-m
    tmux send-keys -t mdi:0.top-right "cd /etc/portage/; clear" C-m
    tmux send-keys -t mdi:0.bottom-right "tail -f /var/log/emerge.log" C-m
    
    tmux select-pane -L -t mdi:0

  # Create a jetty window
  tmux new-window -t mdi:1 -n jetty
      
    tmux split-window -h -t mdi:1 # -h actually means split vertically
    
    tmux send-keys -t mdi:1.left "cd /home/quy/bin/jetty; clear" C-m
    tmux send-keys -t mdi:1.right "cd /tmp; clear" C-m

    tmux select-pane -L -t mdi:1

  # Create a modules window
  tmux new-window -t mdi:2 -n modules

    tmux split-window -h -t mdi:2 # -h actually means split vertically
    tmux split-window -v -t mdi:2.right #-v actually means split horizontally
    
    tmux send-keys -t mdi:2.left "cd $modules; clear" C-m
    tmux send-keys -t mdi:2.left "auto-kinit" C-m
    tmux send-keys -t mdi:2.top-right "cd $mdi; clear " C-m
    tmux send-keys -t mdi:2.bottom-right "cd $mdi; clear" C-m

    tmux select-pane -L -t mdi:2

  # Create an ear window
  tmux new-window -t mdi:3 -n ear

    tmux split-window -h -t mdi:3 # -h actually means split vertically
    tmux split-window -v -t mdi:3.right #-v actually means split horizontally
    
    tmux send-keys -t mdi:3.left "cd $cu; clear" C-m
    tmux send-keys -t mdi:3.top-right "clear; cd $ear/META-INF/; vim application.xml" C-m
    tmux send-keys -t mdi:3.bottom-right "cd $ear; clear" C-m

    tmux select-pane -L -t mdi:3

  # Create an Root JPTree  window
  tmux new-window -t mdi:4 -n "Root"

    tmux split-window -h -t mdi:4 # -h actually means split vertically
    
    tmux send-keys -t mdi:4.left "cd $rjptree" C-m
    tmux send-keys -t mdi:4.right "cd $wjptree" C-m

    tmux select-pane -L -t mdi:4

  # Create a PSD Root JPTree Window
  tmux new-window -t mdi:5 -n "Root PSD"

    tmux split-window -h -t mdi:5 # -h actually means split vertically
    
    tmux send-keys -t mdi:5.left "cd $prjptree" C-m
    tmux send-keys -t mdi:5.right "cd $pwjptree" C-m

    tmux select-pane -L -t mdi:5

  # Create a PSD CMS JPTree Window
  tmux new-window -t mdi:6 -n "Cms PSD"

    tmux split-window -h -t mdi:6 # -h actually means split vertically
    
    tmux send-keys -t mdi:6.left "cd $posjptree" C-m
    tmux send-keys -t mdi:6.right "cd $pojptree" C-m

    tmux select-pane -L -t mdi:6

  # Create a Ops JPTree Window
  tmux new-window -t mdi:7 -n "Ops"

    tmux split-window -h -t mdi:7 # -h actually means split vertically
    
    tmux send-keys -t mdi:7.left "cd $ojptree" C-m
    tmux send-keys -t mdi:7.right "cd $ojptree" C-m

    tmux select-pane -L -t mdi:7

  # Create a PSD Webapp
  tmux new-window -t mdi:8 -n "PSD Webapp"

    tmux split-window -h -t mdi:8 # -h actually means split vertically
    tmux split-window -v -t mdi:8.right #-v actually means split horizontally
    
    tmux send-keys -t mdi:8.left "cd $psdWebapp" C-m
    tmux send-keys -t mdi:8.bottom-right "cd $psd" C-m
    tmux send-keys -t mdi:8.top-right "cd $md" C-m

    tmux select-pane -L -t mdi:8

  # Create a PSD Webapp
  tmux new-window -t mdi:9 -n "ssh"

    tmux split-window -h -t mdi:9 # -h actually means split vertically
    
    tmux send-keys -t mdi:9.left "clear" C-m
    tmux send-keys -t mdi:9.right "cat ~/docs/servers" C-m

    tmux select-pane -L -t mdi:9

  # Select the root window
  tmux select-window -t mdi:0

  # Attach the session
  tmux attach-session -t mdi
}

function doesTmuxSessionExist
{
    local session=$1
    tmux list-sessions | grep -q $session
    local exists=$?
    [ $exists -eq 0 ] && echo "Tmux session $session already exists"
    return $exists
}

function tmuxAttachOrCreateSession()
{
	local session=$1
	doesTmuxSessionExist "${session}" && tmux-attach ${session} && return

	tmux start-server
}
