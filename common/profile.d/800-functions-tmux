#!/bin/sh

export TMUX_SIGNAL_NONE="No_Wait"
export TMUX_SIGNAL_NONE_DELAY="0"
export TMUX_SIGNAL_EPOCH="Tmux-Signal_Simple"
export TMUX_SIGNAL_EPOCH_DELAY="2"
export TMUX_SIGNAL_DOCKER_INIT="Tmux-Signal_Docker-Init"
export TMUX_SIGNAL_DOCKER_INIT_DELAY="120"
export TMUX_SIGNAL_DOCKER="Tmux-Signal_Docker-Loaded"
export TMUX_SIGNAL_DOCKER_DELAY="5"
export TMUX_SIGNAL_PLATFORM="Tmux-Signal_Platform-Loaded"
export TMUX_SIGNAL_PLATFORM_DELAY="60"
export TMUX_SIGNAL_CX="Tmux-Signal_CX-Loaded"
export TMUX_SIGNAL_CX_DELAY="220"
export TMUX_SIGNAL_STATICS="Tmux-Signal_Statics-Imported"
export TMUX_SIGNAL_STATICS_DELAY="220"
export TMUX_SIGNAL_DBS="Tmux-Signal_DBS-Loaded"
export TMUX_SIGNAL_DBS_DELAY="220"

export TMUX_VALUE_ATTACH_NONE="TMUX_VALUE_ATTACH_NONE"
export TMUX_CLEAN_DB="echo Using Existing DB"

export CMD_DOCKER_UP="docker-compose up"
export CMD_BLADE_RUNNER="mvn blade:run"
export CMD_PROVISION_STATICS="mvn bb:provision"
export CMD_IMPORT_EXPERIENCES="mvn bb:import-experiences"
export CMD_CLEAN_DATABASE="mvn clean install -Pclean-database"
export CMD_NO_CLEAN_DATABASE="echo Using Existing DB"

export TMUX_PARAM_SESSION_NAME="Sesh"
export TMUX_PARAM_FIRST_PANE_NAME="main"
export TMUX_PARAM_INDEX="0"
export TMUX_PARAM_PATH="${HOME}"
export TMUX_PARAM_CMD="echo 'Welcome $(whoami)'"
export TMUX_PARAM_SIGNAL_DELAY="0"
export TMUX_PARAM_WAIT=${TMUX_SIGNAL_NONE}
export TMUX_PARAM_SIGNAL=${TMUX_SIGNAL_NONE}
export TMUX_PARAM_ATTACH=${TMUX_VALUE_ATTACH_NONE}



function tmux-wait-for-signal()
{
	local signal=${1:-${TMUX_PARAM_WAIT}}
	
	if [[ $signal == ${TMUX_SIGNAL_NONE} ]]; then
		echo "Starting now"
	else
		echo "Starting on a delay; waiting for signal: ${signal}"; tmux wait-for "${signal}"
	fi
}

function tmux-raise-delayed-signal()
{
	local signal=${1:-${TMUX_PARAM_WAIT}}
	local delay=${2:-${TMUX_SIGNAL_EPOCH_DELAY}}
	[[ $signal == ${TMUX_SIGNAL_NONE} ]] || (sleep ${delay}; tmux wait-for -S "${signal}")&
}

function tmux-launch-split-pane()
{
	local session=${1:-"$(quid)"}
	local startingPaneIndex=${2:-${TMUX_PARAM_INDEX}}
	local startingPaneName=${3:-${TMUX_PARAM_FIRST_PANE_NAME}}
	local waitForSignal=${4:-${TMUX_PARAM_WAIT}}
	local raiseSignal=${5:-${TMUX_PARAM_SIGNAL}}
	local signalDelay=${6:-${TMUX_PARAM_SIGNAL_DELAY}}
	local startingPath=${7:-"${TMUX_PARAM_PATH}"}
	local execCmd=${8:-${TMUX_PARAM_CMD}}
	local attach=${9:-$TMUX_PARAM_ATTACH}

	# Create The Window
	tmux-new-window ${session} ${startingPaneIndex} ${startingPaneName}

	# Create a split window: 
	tmux split-window -h -t ${session}:${startingPaneIndex} # -h actually means split vertically

	# Left Window Commands
	tmux send-keys -t ${session}:${startingPaneIndex}.left "cd ${startingPath}; tmux-wait-for-signal ${waitForSignal}; ${execCmd}" C-m

	# Right Window Commands
	tmux send-keys -t ${session}:${startingPaneIndex}.right "cd ${startingPath}" C-m

	# Delay, then send a signal that Infra is done loading
	[[ ${raiseSignal} == ${TMUX_SIGNAL_NONE} ]] || tmux-raise-delayed-signal "${raiseSignal}"

	[[ ${attach} == ${TMUX_PARAM_ATTACH} ]] && tmux-attach ${session}
}

function tmux-launch-pane()
{
	local session=${1:-${TMUX_PARAM_SESSION_NAME}}
	local startingPaneIndex=${2:-${TMUX_PARAM_INDEX}}
	local startingPaneName=${3:-${TMUX_PARAM_FIRST_PANE_NAME}}
	local waitForSignal=${4:-${TMUX_PARAM_WAIT}}
	local raiseSignal=${5:-${TMUX_PARAM_SIGNAL}}
	local signalDelay=${6:-${TMUX_PARAM_SIGNAL_DELAY}}
	local startingPath=${7:-"${TMUX_PARAM_PATH}"}
	local execCmd=${8:-${TMUX_PARAM_CMD}}
	local attach=${9:-$TMUX_PARAM_ATTACH}

	# Create The Window
	tmux-new-window ${session} ${startingPaneIndex} ${startingPaneName}

	# Left Window Commands
	tmux send-keys -t ${session}:${startingPaneIndex} "cd ${startingPath}; tmux-wait-for-signal ${waitForSignal}; ${execCmd}" C-m

	# Delay, then send a signal that Infra is done loading
	[[ ${raiseSignal} == ${TMUX_SIGNAL_NONE} ]] || tmux-raise-delayed-signal "${raiseSignal}"

	[[ ${attach} == ${TMUX_PARAM_ATTACH} ]] && tmux-attach ${session}
}

function tmux-bb-docker()
{
	local session=${1:-"docker"}
	TMUX_PARAM_PATH=${BB_PLATFORM} TMUX_PARAM_CMD=${CMD_DOCKER_UP} tmux-launch-pane ${session}
}

function tmux-bb-plat()
{
	local session=${1:-"platform"}
	TMUX_PARAM_PATH=${BB_PLATFORM} TMUX_PARAM_CMD=${CMD_BLADE_RUNNER} tmux-launch-pane ${session}
}

function tmux-bb()
{
	local session=${1:-"bb"}
	local startingPaneIndex=${2:-${TMUX_PARAM_INDEX}}
	TMUX_PARAM_FIRST_PANE_NAME="docker"   TMUX_PARAM_INDEX=$((startingPaneIndex++)) tmux-bb-docker $session
	TMUX_PARAM_FIRST_PANE_NAME="platform" TMUX_PARAM_INDEX=$((startingPaneIndex++)) tmux-bb-plat $session
}

function tmux-cx()
{
	local session=${1:-"cx"}
	TMUX_PARAM_PATH=${CX_HOME} TMUX_PARAM_CMD=${CMD_BLADE_RUNNER} tmux-launch-pane ${session}
}

function tmux-dbs()
{
	local session=${1:-"cx"}
	local startingPaneIndex=${2:-1}
	local startingPaneName=${3:-${TMUX_PARAM_FIRST_PANE_NAME}}
	local waitForSignal=${4:-${TMUX_SIGNAL_NONE}}
	local raiseSignal=${5:-"${TMUX_SIGNAL_NONE}"}
	local signalDelay=${6:-${TMUX_SIGNAL_NONE}}
	local startingPath=${7:-${CX_HOME}}
	local execCmd=${8:-${CMD_BLADE_RUNNER}}
	local attach=${9:-$TMUX_PARAM_ATTACH}
	tmux-ensure-server ${session} ${startingPaneName}

	# Delay, then send a signal that Infra is done loading
	[[ ${waitForSignal} == ${TMUX_SIGNAL_NONE} ]] || tmux-raise-delayed-signal "${waitForSignal}"

	local i=${startingPaneIndex}
	# Create a Window for each DBS Capability listed in ~/.bb/dbs-all (minus ~/.bb/dbs-excluded)
	for c in $(dbs); do
		# Window for the DBS Capability
		tmux new-window -t ${session}:${i} -n "${c}"
		# Wait for the "${TMUX_WAIT_PLATFORM}" signal, and then run Maven
		tmux send-keys -t ${session}:${i} "cd ${DBS_HOME}/${c}; tmux-wait-for-signal ${waitForSignal}; ${execCmd}" C-m
		tmux select-pane -L -t ${session}:${i}
		((i++))
	done

	[[ ${attach} == ${TMUX_PARAM_ATTACH} ]] && tmux-attach ${session}
}


function tmux-cx-clean-database()
{
	tmux-cx "${TMUX_SIGNAL_NONE}" "$TMUX_PARAM_ATTACH" "cx-db" 1 "blank" $CMD_CLEAN_DATABASE
}

function tmux-dbs-clean-database()
{
	tmux-dbs "$TMUX_SIGNAL_NONE" "$TMUX_PARAM_ATTACH" "dbs-db" 1 "blank" $CMD_CLEAN_DATABASE
}

function tmux-bbdbs()
{
	tmux-bb $TMUX_VALUE_ATTACH_NONE
	tmux-dbs $TMUX_SIGNAL_PLATFORM
}


function tmux-bball()
{
	tmux-bb $TMUX_VALUE_ATTACH_NONE
	tmux-dbs "$"$TMUX_SIGNAL_PLATFORM"" "$TMUX_VALUE_ATTACH_NONE"
	tmux-cx "$TMUX_SIGNAL_PLATFORM"
}

function tmux-bbx()
{
	tmux-bb "$TMUX_VALUE_ATTACH_NONE" "bbx"
	tmux-cx "$TMUX_SIGNAL_PLATFORM" "$TMUX_VALUE_ATTACH_NONE" "bbx" 1
	tmux-dbs "$TMUX_SIGNAL_PLATFORM" "$TMUX_PARAM_ATTACH" "bbx" 2
}

function tmux-kill()
{
    tmux kill-session -t $1
}

function tmux-attach()
{
	local session=$1

	if [ -n "$TMUX" ]; then
		tmux switch-client -t $session
	else
		tmux attach -t $1
	fi
}

function tmux-scala
{
  tmux start-server

  doesTmuxSessionExist "scala" && tmux-attach scala && return

  local startingDir=$PWD

  # Create the a session named, 'mdi', whose first window is called, 'root'
  tmux new-session -d -s scala -n root
    tmux split-window -h -t scala:0 # -h actually means split vertically
    tmux split-window -v -t scala:0.right #-v actually means split horizontally

    tmux send-keys -t mdi:0.left "cd $startingDir; clear" C-m
    tmux send-keys -t mdi:0.top-right "cd $startingDir; clear" C-m

    tmux select-pane -L -t scala:0

  # Create Split Window
  tmux new-window -t scala:1 -n scala
    tmux split-window -h -t scala:1 # -h actually means split vertically
    tmux split-window -v -t scala:1.right #-v actually means split horizontally

    # Set initial directories
    tmux send-keys -t scala:1.left "cd $startingDir; clear" C-m
    tmux send-keys -t scala:1.top-right "cd $startingDir; clear; sbt" C-m
    tmux send-keys -t scala:1.bottom-right "cd $startingDir; watch tree" C-m
  
    tmux select-pane -L -t scala:1

  tmux new-window -t scala:2 -n repl

    # Set initial directories
    tmux send-keys -t scala:2 "cd $startingDir; scala" C-m

  # Select the first window
  tmux select-window -t scala:1

  # Attach the session
  tmux attach-session -t scala
}

function tmux-mdi
{
  tmux start-server

  doesTmuxSessionExist "mdi" && tmux-attach mdi && return

  # Create the a session named, 'mdi', whose first window is called, 'root'
  tmux new-session -d -s mdi -n root

    # Split the 'root' window vertically, and split the right pane horizontally
    tmux split-window -h -t mdi:0 # -h actually means split vertically
    tmux split-window -v -t mdi:0.right #-v actually means split horizontally

    # Make all of them root panels
    tmux send-keys -t mdi:0.left "sudo su" C-m
    tmux send-keys -t mdi:0.top-right "sudo su" C-m
    tmux send-keys -t mdi:0.bottom-right "sudo su" C-m
    
    # Set initial directories
    tmux send-keys -t mdi:0.left "cd /root; clear" C-m
    tmux send-keys -t mdi:0.top-right "cd /etc/portage/; clear" C-m
    tmux send-keys -t mdi:0.bottom-right "tail -f /var/log/emerge.log" C-m
    
    tmux select-pane -L -t mdi:0

  # Create a jetty window
  tmux new-window -t mdi:1 -n jetty
      
    tmux split-window -h -t mdi:1 # -h actually means split vertically
    
    tmux send-keys -t mdi:1.left "cd /home/quy/bin/jetty; clear" C-m
    tmux send-keys -t mdi:1.right "cd /tmp; clear" C-m

    tmux select-pane -L -t mdi:1

  # Create a modules window
  tmux new-window -t mdi:2 -n modules

    tmux split-window -h -t mdi:2 # -h actually means split vertically
    tmux split-window -v -t mdi:2.right #-v actually means split horizontally
    
    tmux send-keys -t mdi:2.left "cd $modules; clear" C-m
    tmux send-keys -t mdi:2.left "auto-kinit" C-m
    tmux send-keys -t mdi:2.top-right "cd $mdi; clear " C-m
    tmux send-keys -t mdi:2.bottom-right "cd $mdi; clear" C-m

    tmux select-pane -L -t mdi:2

  # Create an ear window
  tmux new-window -t mdi:3 -n ear

    tmux split-window -h -t mdi:3 # -h actually means split vertically
    tmux split-window -v -t mdi:3.right #-v actually means split horizontally
    
    tmux send-keys -t mdi:3.left "cd $cu; clear" C-m
    tmux send-keys -t mdi:3.top-right "clear; cd $ear/META-INF/; vim application.xml" C-m
    tmux send-keys -t mdi:3.bottom-right "cd $ear; clear" C-m

    tmux select-pane -L -t mdi:3

  # Create an Root JPTree  window
  tmux new-window -t mdi:4 -n "Root"

    tmux split-window -h -t mdi:4 # -h actually means split vertically
    
    tmux send-keys -t mdi:4.left "cd $rjptree" C-m
    tmux send-keys -t mdi:4.right "cd $wjptree" C-m

    tmux select-pane -L -t mdi:4

  # Create a PSD Root JPTree Window
  tmux new-window -t mdi:5 -n "Root PSD"

    tmux split-window -h -t mdi:5 # -h actually means split vertically
    
    tmux send-keys -t mdi:5.left "cd $prjptree" C-m
    tmux send-keys -t mdi:5.right "cd $pwjptree" C-m

    tmux select-pane -L -t mdi:5

  # Create a PSD CMS JPTree Window
  tmux new-window -t mdi:6 -n "Cms PSD"

    tmux split-window -h -t mdi:6 # -h actually means split vertically
    
    tmux send-keys -t mdi:6.left "cd $posjptree" C-m
    tmux send-keys -t mdi:6.right "cd $pojptree" C-m

    tmux select-pane -L -t mdi:6

  # Create a Ops JPTree Window
  tmux new-window -t mdi:7 -n "Ops"

    tmux split-window -h -t mdi:7 # -h actually means split vertically
    
    tmux send-keys -t mdi:7.left "cd $ojptree" C-m
    tmux send-keys -t mdi:7.right "cd $ojptree" C-m

    tmux select-pane -L -t mdi:7

  # Create a PSD Webapp
  tmux new-window -t mdi:8 -n "PSD Webapp"

    tmux split-window -h -t mdi:8 # -h actually means split vertically
    tmux split-window -v -t mdi:8.right #-v actually means split horizontally
    
    tmux send-keys -t mdi:8.left "cd $psdWebapp" C-m
    tmux send-keys -t mdi:8.bottom-right "cd $psd" C-m
    tmux send-keys -t mdi:8.top-right "cd $md" C-m

    tmux select-pane -L -t mdi:8

  # Create a PSD Webapp
  tmux new-window -t mdi:9 -n "ssh"

    tmux split-window -h -t mdi:9 # -h actually means split vertically
    
    tmux send-keys -t mdi:9.left "clear" C-m
    tmux send-keys -t mdi:9.right "cat ~/docs/servers" C-m

    tmux select-pane -L -t mdi:9

  # Select the root window
  tmux select-window -t mdi:0

  # Attach the session
  tmux attach-session -t mdi
}

function doesTmuxSessionExist
{
    local session=$1
    tmux list-sessions | grep -q $session
    local exists=$?
    return $exists
}

function tmux-ensure-server()
{
	local session=$1
	local startingPaneName=${2:-${TMUX_PARAM_FIRST_PANE_NAME}}
	if ! doesTmuxSessionExist "${session}"; then
		tmux start-server 
		tmux new-session -d -s ${session} -n $startingPaneName
	fi
}

function tmux-new-window()
{
	local session=$1
	local startingPaneIndex=${2:-${TMUX_PARAM_INDEX}}
	local startingPaneName=${3:-${TMUX_PARAM_FIRST_PANE_NAME}}

	if doesTmuxSessionExist "${session}" && [ $startingPaneIndex > 0 ]; then
		tmux new-window -t ${session}:${startingPaneIndex} -n $startingPaneName
	else
		tmux start-server 
		tmux new-session -d -s ${session} -n $startingPaneName
	fi
}
