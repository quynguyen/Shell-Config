#!/bin/sh

function deepReadLink() {
	local target=$1

	cd $(dirname "$target")
	target=$(basename "$target")

	# Iterate down a (possible) chain of symlinks
	while [ -L "$target" ]
	do
	    target=$(readlink "$target")
	    cd $(dirname "$target")
	    target=$(basename "$target")
	done

	# Compute the canonicalized name by finding the physical path 
	# for the directory we're in and appending the target file.
	local path=`pwd -P`
	local result="$path/$target"

	echo $result
}


# Prints out the relative path between to absolute paths. Trivial.
#
# Parameters:
# $1 = first path
# $2 = second path
#
# Output: the relative path between 1st and 2nd paths
function relative() {
    local pos="${1%%/}" ref="${2%%/}" down=''

    while :; do
        test "$pos" = '/' && break
        case "$ref" in $pos/*) break;; esac
        down="../$down"
        pos=${pos%/*}
    done

    echo "$down${ref##$pos/}"
}

function moveAndLink()
{
	local sourceDir=$1
	local destDir=$2
	local name=$3

	[ ! -d $destDir ] && \
		echo "$destDir doest not exist" && return 1

	[ -z $name ] && \
		name=$(basename $sourceDir)

	local destPath=$destDir/$name

	## Is the $sourceDir already a link?
	if [ -L $sourceDir ]; then
		# Is $sourceDir already pointing to $destPath?
		if [ $sourceDir -ef $destPath ]; then
			echo "$sourceDir already linked to $destPath"
			return 0
		else
		# Else, they're point to different places. 
			echo -----------------------------------------
			echo "Moving files from $sourceDir to $destPath"
			echo -----------------------------------------
			for f in $( ls $sourceDir ); do
				mv -v $sourceDir/$f $destPath
			done
			echo -----------------------------------------
			echo "Removing $(readlink $sourceDir)"
			echo -----------------------------------------
			rmdir -v $(readlink $sourceDir)
		fi
	elif [ -e $sourceDir ]; then
		echo -----------------------------------------
		echo "Moving ${sourceDir} to ${destPath}"
		echo -----------------------------------------
		mv -v $sourceDir $destPath
	fi

	[ ! -d $destPath ] && mkdir -v $destPath

	echo -----------------------------------------
	echo "Creating link from ${sourceDir} to ${destPath}"
	echo -----------------------------------------
	ln -vsnf $destPath $sourceDir
}


# Creates a symlink from $linkFile to $sourceFile
# If $linkFile is a directory, that always exists
# Then those existing contents will be copied
#
function relink(){
	local sourceFile=$( dynamicLookup $( deepReadLink $1 ) )
	local linkFile=$2
	local renamedLinkFile="${linkFile}-$(date +%^s)"

	#Is the linkFile a directory that already exists
	#.. and linkFile isn't pointing to the same location to the sourceFile
	if [ -d $linkFile ] && [ ! $linkFile -ef $sourceFile ]; then
		echo -----------------------------------------
		echo "Renaming ${linkFile} to ${renamedLinkFile}"
		echo -----------------------------------------
		#rename it
		mv -v $linkFile $renamedLinkFile
	fi

	#Create the symlinks in $HOME
	ln -vsnf $sourceFile $linkFile; 

	#Move over any existing files
	if [ -d $renamedLinkFile ]; then
		echo -----------------------------------------
		echo "Moving files from ${renamedLinkFile} to ${linkFile}" 
		echo -----------------------------------------
		for existingFile in `ls $renamedLinkFile`; do 
			if [ ! -e $linkFile/$existingFile ]; then
				mv -v $renamedLinkFile/$existingFile $linkFile/
				if [ -d $linkFile/.git ]; then
					grep -q $existingFile $linkFile/.gitignore || echo $existingFile >> $linkFile/.gitignore
				fi

			fi
		done
		rm -vrf $renamedLinkFile
		unset renamedLinkFile
	fi
}


function dynamicLookup()
{
    local dir=$(dirname $1)
    local sourceFile=$(basename $1)
    local prefix=${sourceFile%.*}
    local extension=$([[ "$sourceFile" = *.* ]] && echo ".${sourceFile##*.}" || echo '')
    local os=`uname`

    local osSourceFile=""
    

    if [ -z $extension ]; then
        osSourceFile="${prefix}-${os}"
    else
        osSourceFile="${prefix}-${os}${extension}"
    fi

    if [ -e $dir/$osSourceFile ]; then
        echo $dir/$osSourceFile
    else
        echo $dir/$sourceFile
    fi
}

function apps() {
	for app in $(ls $APPSTORE/.versions/); do
		echo $app
	done
}

function appLink() {
	[ $# -eq 2 ] || {
		echo "$0 <app name> <version>"
		return 1
	}

	app=$1
	version=$2
	appPath=$APPS/$app
	installedApp=$APPSTORE/.versions/$app

	[ -d $installedApp ] || {
		echo "$app isn't installed"
		return 1
	}

	sourceLink=$APPSTORE/$app-$version

	[ -d $sourceLink ] || {
		echo "$sourceLink doesn't exist"
		return 1
	}

	ln -vsnf $sourceLink $appPath
}
